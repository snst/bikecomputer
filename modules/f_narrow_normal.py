# Code generated by font_to_py.py.
# Font: libel.ttf Char set: .0123456789:
# Cmd: ./font_to_py.py -x choosen/libel.ttf 42 f_narrow_normal.py -c 0123456789:. -e 32
version = '0.33'

def height():
    return 42

def baseline():
    return 41

def max_width():
    return 18

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 58

_font =\
b'\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x78\x78\x78\x78'\
b'\x30\x00\x12\x00\x03\xf0\x00\x0f\xfc\x00\x1f\xfe\x00\x3f\xff\x00'\
b'\x3f\xff\x00\x7e\x1f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c'\
b'\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f'\
b'\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80'\
b'\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c'\
b'\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f'\
b'\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80'\
b'\x7e\x1f\x80\x3f\xff\x00\x3f\xff\x00\x1f\xfe\x00\x0f\xfc\x00\x03'\
b'\xf0\x00\x09\x00\x00\x00\x1f\x00\x1f\x00\x3f\x00\xff\x00\xff\x00'\
b'\xff\x00\xff\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00'\
b'\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00'\
b'\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00'\
b'\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00\x1f\x00'\
b'\x1f\x00\x1f\x00\x1f\x00\x00\x00\x11\x00\x03\xe0\x00\x0f\xf8\x00'\
b'\x1f\xfc\x00\x3f\xfe\x00\x3f\xfe\x00\x7e\x3f\x00\x7c\x1f\x00\x7c'\
b'\x1f\x00\x7c\x1f\x00\x7c\x1f\x00\x40\x1f\x00\x00\x1f\x00\x00\x3e'\
b'\x00\x00\x3e\x00\x00\x7c\x00\x00\x7c\x00\x00\xf8\x00\x00\xf8\x00'\
b'\x01\xf0\x00\x03\xf0\x00\x03\xe0\x00\x07\xe0\x00\x07\xc0\x00\x0f'\
b'\xc0\x00\x0f\x80\x00\x1f\x80\x00\x1f\x00\x00\x3f\x00\x00\x3e\x00'\
b'\x00\x7e\x00\x00\x7c\x00\x00\x7c\x00\x00\x7c\x00\x00\x7c\x00\x00'\
b'\x7c\x00\x00\x7c\x00\x00\x7f\xff\x00\x7f\xff\x00\x7f\xff\x00\x7f'\
b'\xff\x00\x7f\xff\x00\x00\x00\x00\x11\x00\x03\xe0\x00\x0f\xf8\x00'\
b'\x1f\xfc\x00\x3f\xfe\x00\x3f\xfe\x00\x7e\x3f\x00\x7c\x1f\x00\x7c'\
b'\x1f\x00\x7c\x1f\x00\x00\x1f\x00\x00\x1f\x00\x00\x1f\x00\x00\x1f'\
b'\x00\x00\x1f\x00\x00\x1f\x00\x00\x1f\x00\x00\x1f\x00\x00\x3e\x00'\
b'\x00\x7e\x00\x03\xfc\x00\x03\xf0\x00\x03\xf8\x00\x03\xfc\x00\x00'\
b'\x7e\x00\x00\x3f\x00\x00\x1f\x00\x00\x1f\x00\x00\x1f\x00\x00\x1f'\
b'\x00\x00\x1f\x00\x00\x1f\x00\x00\x1f\x00\x60\x1f\x00\x7c\x1f\x00'\
b'\x7c\x1f\x00\x7c\x1f\x00\x7e\x3f\x00\x3f\xfe\x00\x3f\xfe\x00\x1f'\
b'\xfc\x00\x0f\xf8\x00\x03\xe0\x00\x12\x00\x00\x00\x00\x00\x3e\x00'\
b'\x00\x3e\x00\x00\x3e\x00\x00\x3e\x00\x00\x3e\x00\x00\x3e\x00\x00'\
b'\x3e\x00\x00\x3e\x00\x3e\x3e\x00\x3e\x3e\x00\x3c\x3e\x00\x3c\x3e'\
b'\x00\x3c\x3e\x00\x3c\x3e\x00\x3c\x3e\x00\x7c\x3e\x00\x7c\x3e\x00'\
b'\x78\x3e\x00\x78\x3e\x00\x78\x3e\x00\x78\x3e\x00\x7f\xff\x80\xff'\
b'\xff\x80\xff\xff\x80\xff\xff\x80\xff\xff\x80\x00\x3e\x00\x00\x3e'\
b'\x00\x00\x3e\x00\x00\x3e\x00\x00\x3e\x00\x00\x3e\x00\x00\x3e\x00'\
b'\x00\x3e\x00\x00\x3e\x00\x00\x3e\x00\x00\x3e\x00\x00\x3e\x00\x00'\
b'\x3e\x00\x00\x3e\x00\x00\x00\x00\x12\x00\x00\x00\x00\x3f\xff\x80'\
b'\x3f\xff\x80\x3f\xff\x80\x3f\xff\x80\x3f\xff\x80\x3c\x00\x00\x3c'\
b'\x00\x00\x3c\x00\x00\x7c\x00\x00\x7d\xf8\x00\x7f\xfc\x00\x7f\xfe'\
b'\x00\x7f\xff\x00\x7f\xff\x00\x7c\x3f\x80\x7c\x1f\x80\x08\x0f\x80'\
b'\x00\x0f\x80\x00\x0f\x80\x00\x0f\x80\x00\x0f\x80\x00\x0f\x80\x00'\
b'\x0f\x80\x00\x0f\x80\x00\x0f\x80\x00\x0f\x80\x00\x0f\x80\x00\x0f'\
b'\x80\x00\x0f\x80\x00\x0f\x80\x00\x0f\x80\x40\x0f\x80\x78\x0f\x80'\
b'\x78\x0f\x80\x7c\x0f\x80\x7e\x3f\x80\x3f\xff\x00\x3f\xff\x00\x1f'\
b'\xfe\x00\x0f\xf8\x00\x03\xe0\x00\x12\x00\x03\xf0\x00\x0f\xfc\x00'\
b'\x1f\xfe\x00\x3f\xff\x00\x3f\xff\x00\x7e\x1f\x80\x7c\x0f\x80\x7c'\
b'\x0f\x80\x7c\x0f\x80\x7c\x00\x00\x7c\x00\x00\x7c\x00\x00\x7c\x00'\
b'\x00\x7d\xf0\x00\x7f\xfc\x00\x7f\xfe\x00\x7f\xff\x00\x7f\xff\x00'\
b'\x7e\x1f\x80\x7e\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c'\
b'\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f'\
b'\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80'\
b'\x7c\x0f\x80\x7c\x0f\x80\x7e\x1f\x80\x3f\xff\x00\x3f\xff\x00\x1f'\
b'\xfe\x00\x0f\xfc\x00\x03\xf0\x00\x10\x00\x00\x00\x7f\xfe\x7f\xfe'\
b'\x7f\xfe\x7f\xfe\x7f\xfe\x00\x1e\x00\x3c\x00\x3c\x00\x3c\x00\x3c'\
b'\x00\x7c\x00\x78\x00\x78\x00\x78\x00\xf8\x00\xf0\x00\xf0\x00\xf0'\
b'\x01\xf0\x01\xf0\x01\xe0\x01\xe0\x03\xe0\x03\xe0\x03\xc0\x03\xc0'\
b'\x07\xc0\x07\xc0\x07\xc0\x07\x80\x0f\x80\x0f\x80\x0f\x80\x0f\x00'\
b'\x1f\x00\x1f\x00\x1f\x00\x1e\x00\x3e\x00\x3e\x00\x00\x00\x12\x00'\
b'\x03\xf0\x00\x0f\xfc\x00\x1f\xfe\x00\x3f\xff\x00\x3f\xff\x00\x7e'\
b'\x1f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f'\
b'\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80'\
b'\x7c\x0f\x80\x3e\x1f\x00\x3f\xff\x00\x0f\xfe\x00\x0f\xfe\x00\x3f'\
b'\xff\x00\x3e\x1f\x00\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f'\
b'\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80'\
b'\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7e\x1f\x80\x3f'\
b'\xff\x00\x3f\xff\x00\x1f\xfe\x00\x0f\xfc\x00\x03\xf0\x00\x12\x00'\
b'\x03\xf0\x00\x0f\xfc\x00\x1f\xfe\x00\x3f\xff\x00\x3f\xff\x00\x7e'\
b'\x1f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f'\
b'\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80'\
b'\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c'\
b'\x1f\x80\x7e\x1f\x80\x3f\xff\x80\x3f\xff\x80\x1f\xff\x80\x0f\xff'\
b'\x80\x07\xef\x80\x00\x0f\x80\x00\x0f\x80\x00\x0f\x80\x00\x0f\x80'\
b'\x00\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7c\x0f\x80\x7e\x1f\x80\x3f'\
b'\xff\x00\x3f\xff\x00\x1f\xfe\x00\x0f\xfc\x00\x03\xf0\x00\x07\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x38\x7c\x7c\x7c\x7c\x10\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x10\x7c\x7c\x7c\x7c\x38\x00'

_index =\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x56\x00'\
b'\x00\x00\x82\x00\x02\x01\x58\x01\xd8\x01\x58\x02\xd8\x02\x58\x03'\
b'\xd8\x03\x2e\x04\xae\x04\x2e\x05\x5a\x05'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 32 + 1) if oc >= 32 and oc <= 58 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 42
    return _mvfont[doff + 2:next_offs], 42, width
 

def get_width(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 32 + 1) if oc >= 32 and oc <= 58 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])
    return width
 
